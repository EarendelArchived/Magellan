From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AlphaKR93 <alphakr93@outlook.com>
Date: Thu, 22 Dec 2022 20:05:01 +0900
Subject: [PATCH] Magellan Configurations


diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 46858fb57f122033a68aeb4ad3943132a677fb46..1912a102fc827b5911564470d5a218ce50c1cbf1 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -227,6 +227,15 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         }
         org.purpurmc.purpur.PurpurConfig.registerCommands();
         // Purpur end
+        // Magellan start
+        try {
+            team.earendel.magellan.configurations.MagellanConfiguration.init((java.io.File) options.valueOf("magellan-configuration"));
+        } catch (Exception e) {
+            DedicatedServer.LOGGER.error("Unable to load Magellan configurations", e);
+            return false;
+        }
+        team.earendel.magellan.configurations.MagellanConfiguration.registerCommands();
+        // Magellan end
         com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // load version history now
         io.papermc.paper.brigadier.PaperBrigadierProviderImpl.INSTANCE.getClass(); // init PaperBrigadierProvider
         // Paper end
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 9bcd6ddcbaf00a0207ad3acd38d8f8db34f53f03..00fcf1a49e3add801f7fa2be6aec360099e33a93 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -174,6 +174,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
 
     public final com.destroystokyo.paper.antixray.ChunkPacketBlockController chunkPacketBlockController; // Paper - Anti-Xray
     public final org.purpurmc.purpur.PurpurWorldConfig purpurConfig; // Purpur
+    public final team.earendel.magellan.configurations.MagellanWorldConfiguration magellanWorldConfiguration; // Magellan
 
     public final co.aikar.timings.WorldTimingsHandler timings; // Paper
     public static BlockPos lastPhysicsProblem; // Spigot
@@ -330,6 +331,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName()); // Spigot
         this.paperConfig = paperWorldConfigCreator.apply(this.spigotConfig); // Paper
         this.purpurConfig = new org.purpurmc.purpur.PurpurWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName(), env); // Purpur
+        this.magellanWorldConfiguration = new team.earendel.magellan.configurations.MagellanWorldConfiguration(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName(), env); // Magellan
         this.playerBreedingCooldowns = this.getNewBreedingCooldownCache(); // Purpur
         this.generator = gen;
         this.world = new CraftWorld((ServerLevel) this, gen, biomeProvider, env);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 67c737cc1f504a572ce0c96b60ca256b2066406f..eb9234a11c7a705b1ce8aef0ac80b9ca732a8d20 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1026,6 +1026,7 @@ public final class CraftServer implements Server {
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         this.console.paperConfigurations.reloadConfigs(this.console);
         org.purpurmc.purpur.PurpurConfig.init((File) console.options.valueOf("purpur-settings")); // Purpur
+        team.earendel.magellan.configurations.MagellanConfiguration.init((File) console.options.valueOf("magellan-configuration")); // Magellan
         for (ServerLevel world : this.console.getAllLevels()) {
             // world.serverLevelData.setDifficulty(config.difficulty); // Paper - per level difficulty
             world.setSpawnSettings(world.serverLevelData.getDifficulty() != Difficulty.PEACEFUL && config.spawnMonsters, config.spawnAnimals); // Paper - per level difficulty (from MinecraftServer#setDifficulty(ServerLevel, Difficulty, boolean))
@@ -1042,6 +1043,7 @@ public final class CraftServer implements Server {
             }
             world.spigotConfig.init(); // Spigot
             world.purpurConfig.init(); // Purpur
+            world.magellanWorldConfiguration.init(); // Magellan
         }
 
         Plugin[] pluginClone = pluginManager.getPlugins().clone(); // Paper
@@ -1058,6 +1060,7 @@ public final class CraftServer implements Server {
         org.spigotmc.SpigotConfig.registerCommands(); // Spigot
         io.papermc.paper.command.PaperCommands.registerCommands(this.console); // Paper
         org.purpurmc.purpur.PurpurConfig.registerCommands(); // Purpur
+        team.earendel.magellan.configurations.MagellanConfiguration.registerCommands(); // Magellan
         this.overrideAllCommandBlockCommands = this.commandsConfiguration.getStringList("command-block-overrides").contains("*");
         this.ignoreVanillaPermissions = this.commandsConfiguration.getBoolean("ignore-vanilla-permissions");
 
@@ -2879,6 +2882,13 @@ public final class CraftServer implements Server {
         }
         // Purpur end
 
+        // Magellan start
+        @Override
+        public YamlConfiguration getMagellanConfiguration() {
+            return team.earendel.magellan.configurations.MagellanConfiguration.configuration;
+        }
+        // Magellan end
+
         @Override
         public void restart() {
             org.spigotmc.RestartCommand.restart();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 576cd8e20982bb20d10213b6c7a229428eec1c2f..6d6d3d28506e953b873f2b9799b17fccb402c5fc 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -180,6 +180,14 @@ public class Main {
                         .describedAs("Yml file");
                 // Purpur end
 
+                // Magellan start
+                acceptsAll(asList("magellan", "magellan-configuration"), "File for Magellan configurations")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("magellan.yml"))
+                        .describedAs("Yml file");
+                // Magellan end
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()
diff --git a/src/main/java/team/earendel/magellan/commands/MagellanCommand.java b/src/main/java/team/earendel/magellan/commands/MagellanCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..ea57777c1c410792706265c27b287ad8f4c1a69f
--- /dev/null
+++ b/src/main/java/team/earendel/magellan/commands/MagellanCommand.java
@@ -0,0 +1,66 @@
+package team.earendel.magellan.commands;
+
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.format.NamedTextColor;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import team.earendel.magellan.configurations.MagellanConfiguration;
+
+import java.io.File;
+import java.util.Collections;
+import java.util.List;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+public class MagellanCommand extends Command {
+    public MagellanCommand(String name) {
+        super(name);
+        this.description = "Magellan related commands";
+        this.usageMessage = "/magellan [reload | version]";
+        this.setPermission("bukkit.command.magellan");
+    }
+
+    @Override
+    public List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
+        if (args.length == 1) {
+            return Stream.of("reload", "version")
+                    .filter(arg -> arg.startsWith(args[0].toLowerCase()))
+                    .collect(Collectors.toList());
+        }
+        return Collections.emptyList();
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        if (!testPermission(sender)) return true;
+
+        if (args.length != 1) {
+            sender.sendMessage(Component.text("Usage: " + usageMessage).color(NamedTextColor.RED));
+            return false;
+        }
+
+        if (args[0].equalsIgnoreCase("reload")) {
+            Command.broadcastCommandMessage(sender, Component.text("Please note that this command is not supported and may cause issues.").color(NamedTextColor.RED));
+            Command.broadcastCommandMessage(sender, Component.text("If you encounter any issues please use the /stop command to restart your server.").color(NamedTextColor.RED));
+
+            MinecraftServer console = MinecraftServer.getServer();
+            MagellanConfiguration.init((File) console.options.valueOf("magellan-configuration"));
+            for (ServerLevel level : console.getAllLevels()) {
+                level.magellanWorldConfiguration.init();
+            }
+            console.server.reloadCount++;
+
+            Command.broadcastCommandMessage(sender, Component.text("Successfully reloaded Magellan configuration.").color(NamedTextColor.GREEN));
+        } else if (args[0].equalsIgnoreCase("version")) {
+            Command verCmd = org.bukkit.Bukkit.getServer().getCommandMap().getCommand("version");
+            if (verCmd != null) {
+                return verCmd.execute(sender, commandLabel, new String[0]);
+            }
+        }
+
+        return true;
+    }
+}
diff --git a/src/main/java/team/earendel/magellan/configurations/MagellanConfiguration.java b/src/main/java/team/earendel/magellan/configurations/MagellanConfiguration.java
new file mode 100644
index 0000000000000000000000000000000000000000..6375b45712e764d677a9efceaf99791a51a0c0b8
--- /dev/null
+++ b/src/main/java/team/earendel/magellan/configurations/MagellanConfiguration.java
@@ -0,0 +1,158 @@
+package team.earendel.magellan.configurations;
+
+import com.google.common.base.Throwables;
+import com.google.common.collect.ImmutableMap;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.world.level.block.Blocks;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+import team.earendel.magellan.commands.MagellanCommand;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.logging.Level;
+
+@SuppressWarnings("unused")
+public class MagellanConfiguration {
+    private static final String HEADER = """
+            This is the main configuration file for Magellan.
+            Some options may impact gameplay, so use with caution,
+            and make sure you know what each option does before configuring.
+            """;
+    private static File CONFIG_FILE;
+    public static YamlConfiguration configuration;
+
+    private static Map<String, Command> commands;
+
+    public static int version;
+    static boolean verbose;
+
+    public static void init(File configFile) {
+        CONFIG_FILE = configFile;
+        configuration = new YamlConfiguration();
+        try {
+            configuration.load(CONFIG_FILE);
+        } catch (IOException ignore) {
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load magellan.yml, please correct your syntax errors", ex);
+            throw Throwables.propagate(ex);
+        }
+        configuration.options().header(HEADER);
+        configuration.options().copyDefaults(true);
+        verbose = getBoolean("verbose", false);
+
+        commands = new HashMap<>();
+        commands.put("magellan", new MagellanCommand("magellan"));
+
+        version = getInt("config-version", 1);
+        set("config-version", 1);
+
+        readConfig(MagellanConfiguration.class, null);
+
+        Blocks.rebuildCache();
+    }
+
+    protected static void log(String s) {
+        if (verbose) {
+            log(Level.INFO, s);
+        }
+    }
+
+    protected static void log(Level level, String s) {
+        Bukkit.getLogger().log(level, s);
+    }
+
+    public static void registerCommands() {
+        for (Map.Entry<String, Command> entry : commands.entrySet()) {
+            MinecraftServer.getServer().server.getCommandMap().register(entry.getKey(), "Magellan", entry.getValue());
+        }
+    }
+
+    static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+                    }
+                }
+            }
+        }
+
+        try {
+            configuration.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+        }
+    }
+
+    private static void set(String path, Object val) {
+        configuration.addDefault(path, val);
+        configuration.set(path, val);
+    }
+
+    private static String getString(String path, String def) {
+        configuration.addDefault(path, def);
+        return configuration.getString(path, configuration.getString(path));
+    }
+
+    private static int getInt(String path, int def) {
+        configuration.addDefault(path, def);
+        return configuration.getInt(path, configuration.getInt(path));
+    }
+
+    private static boolean getBoolean(String path, boolean def) {
+        configuration.addDefault(path, def);
+        return configuration.getBoolean(path, configuration.getBoolean(path));
+    }
+
+    private static double getDouble(String path, double def) {
+        configuration.addDefault(path, def);
+        return configuration.getDouble(path, configuration.getDouble(path));
+    }
+
+    private static long getLong(String path, long def) {
+        configuration.addDefault(path, def);
+        return configuration.getLong(path, configuration.getLong(path));
+    }
+
+    private static <T> List getList(String path, T def) {
+        configuration.addDefault(path, def);
+        return configuration.getList(path, configuration.getList(path));
+    }
+
+    static Map<String, Object> getMap(String path, Map<String, Object> def) {
+        if (def != null && configuration.getConfigurationSection(path) == null) {
+            configuration.addDefault(path, def);
+            return def;
+        }
+        return toMap(configuration.getConfigurationSection(path));
+    }
+
+    private static Map<String, Object> toMap(ConfigurationSection section) {
+        ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();
+        if (section != null) {
+            for (String key : section.getKeys(false)) {
+                Object obj = section.get(key);
+                if (obj != null) {
+                    builder.put(key, obj instanceof ConfigurationSection val ? toMap(val) : obj);
+                }
+            }
+        }
+        return builder.build();
+    }
+}
diff --git a/src/main/java/team/earendel/magellan/configurations/MagellanWorldConfiguration.java b/src/main/java/team/earendel/magellan/configurations/MagellanWorldConfiguration.java
new file mode 100644
index 0000000000000000000000000000000000000000..7ed8a287a48a6b3ccc233487281b56ff92805e31
--- /dev/null
+++ b/src/main/java/team/earendel/magellan/configurations/MagellanWorldConfiguration.java
@@ -0,0 +1,75 @@
+package team.earendel.magellan.configurations;
+
+import org.bukkit.World;
+import org.bukkit.configuration.ConfigurationSection;
+import java.util.List;
+import java.util.Map;
+import static team.earendel.magellan.configurations.MagellanConfiguration.log;
+
+@SuppressWarnings("unused")
+public class MagellanWorldConfiguration {
+
+    private final String worldName;
+    private final World.Environment environment;
+
+    public MagellanWorldConfiguration(String worldName, World.Environment environment) {
+        this.worldName = worldName;
+        this.environment = environment;
+        init();
+    }
+
+    public void init() {
+        log("-------- World Configurations For [" + worldName + "] --------");
+        MagellanConfiguration.readConfig(MagellanWorldConfiguration.class, this);
+    }
+
+    private void set(String path, Object val) {
+        MagellanConfiguration.configuration.addDefault("world-configurations.default." + path, val);
+        MagellanConfiguration.configuration.set("world-configurations.default." + path, val);
+        if (MagellanConfiguration.configuration.get("world-configurations." + worldName + "." + path) != null) {
+            MagellanConfiguration.configuration.addDefault("world-configurations." + worldName + "." + path, val);
+            MagellanConfiguration.configuration.set("world-configurations." + worldName + "." + path, val);
+        }
+    }
+
+    private ConfigurationSection getConfigurationSection(String path) {
+        ConfigurationSection section = MagellanConfiguration.configuration.getConfigurationSection("world-configurations." + worldName + "." + path);
+        return section != null ? section : MagellanConfiguration.configuration.getConfigurationSection("world-configurations.default." + path);
+    }
+
+    private String getString(String path, String def) {
+        MagellanConfiguration.configuration.addDefault("world-configurations.default." + path, def);
+        return MagellanConfiguration.configuration.getString("world-configurations." + worldName + "." + path, MagellanConfiguration.configuration.getString("world-configurations.default." + path));
+    }
+
+    private int getInt(String path, int def) {
+        MagellanConfiguration.configuration.addDefault("world-configurations.default." + path, def);
+        return MagellanConfiguration.configuration.getInt("world-configurations." + worldName + "." + path, MagellanConfiguration.configuration.getInt("world-configurations.default." + path));
+    }
+
+    private boolean getBoolean(String path, boolean def) {
+        MagellanConfiguration.configuration.addDefault("world-configurations.default." + path, def);
+        return MagellanConfiguration.configuration.getBoolean("world-configurations." + worldName + "." + path, MagellanConfiguration.configuration.getBoolean("world-configurations.default." + path));
+    }
+
+    private double getDouble(String path, double def) {
+        MagellanConfiguration.configuration.addDefault("world-configurations.default." + path, def);
+        return MagellanConfiguration.configuration.getDouble("world-configurations." + worldName + "." + path, MagellanConfiguration.configuration.getDouble("world-configurations.default." + path));
+    }
+
+    private double getLong(String path, long def) {
+        MagellanConfiguration.configuration.addDefault("world-configurations.default." + path, def);
+        return MagellanConfiguration.configuration.getLong("world-configurations." + worldName + "." + path, MagellanConfiguration.configuration.getLong("world-configurations.default." + path));
+    }
+
+    private <T> List<?> getList(String path, T def) {
+        MagellanConfiguration.configuration.addDefault("world-configurations.default." + path, def);
+        return MagellanConfiguration.configuration.getList("world-configurations." + worldName + "." + path, MagellanConfiguration.configuration.getList("world-configurations.default." + path));
+    }
+
+    private Map<String, Object> getMap(String path, Map<String, Object> def) {
+        final Map<String, Object> fallback = MagellanConfiguration.getMap("world-configurations.default." + path, def);
+        final Map<String, Object> value = MagellanConfiguration.getMap("world-configurations." + worldName + "." + path, null);
+        return value.isEmpty() ? fallback : value;
+    }
+}
